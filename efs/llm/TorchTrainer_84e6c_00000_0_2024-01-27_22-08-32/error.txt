Failure # 1 (occurred at 2024-01-27_22-08-59)
[36mray::_Inner.train()[39m (pid=38668, ip=192.168.1.209, actor_id=5337e9c37f10b278d6a4e4bd01000000, repr=TorchTrainer)
  File "/home/ppundir/Desktop/Desktop/mahcine-learning-operations/mlops/lib/python3.10/site-packages/ray/tune/trainable/trainable.py", line 400, in train
    raise skipped from exception_cause(skipped)
  File "/home/ppundir/Desktop/Desktop/mahcine-learning-operations/mlops/lib/python3.10/site-packages/ray/train/_internal/utils.py", line 54, in check_for_failure
    ray.get(object_ref)
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 192.168.1.209, ID: ac4d04c95321f0923265889d6d37a2f3ad8acb3539aba521d5427579) where the task (actor ID: 4fb3e1de165d334788ab092201000000, name=RayTrainWorker.__init__, pid=38710, memory used=0.98GB) was running was 13.01GB / 13.59GB (0.957603), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: 7ddb124f0b1d3138773042ace794cc6a52e3f172149cb2dae9d5edbb) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 192.168.1.209`. To see the logs of the worker, use `ray logs worker-7ddb124f0b1d3138773042ace794cc6a52e3f172149cb2dae9d5edbb*out -ip 192.168.1.209. Top 10 memory users:
PID	MEM(GB)	COMMAND
38712	1.11	ray::_RayTrainWorker__execute.get_next
38711	1.07	ray::_RayTrainWorker__execute.get_next
38710	0.98	ray::_RayTrainWorker__execute.get_next
38708	0.97	ray::_RayTrainWorker__execute.get_next
38709	0.96	ray::_RayTrainWorker__execute.get_next
38707	0.91	ray::_RayTrainWorker__execute.get_next
35611	0.21	/home/ppundir/Desktop/Desktop/mahcine-learning-operations/mlops/bin/python -m ipykernel_launcher --f...
24923	0.20	/opt/google/chrome/chrome --type=renderer --crashpad-handler-pid=14182 --enable-crash-reporter=, --o...
8711	0.19	/usr/share/code/code --type=renderer --crashpad-handler-pid=8676 --enable-crash-reporter=6f230fa1-d6...
8776	0.15	/usr/share/code/code --type=renderer --crashpad-handler-pid=8676 --enable-crash-reporter=6f230fa1-d6...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
